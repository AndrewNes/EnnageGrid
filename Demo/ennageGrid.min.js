/*-------------------------------------------------------------------------------------*/
/*-------------The product is owned by the Ennage development team.--------------------*/
/*--------------------------The author Andrey Nesterov---------------------------------*/
/*-------------------------------------------------------------------------------------*/

'use strict';

var example  = document.getElementById("ennageGrid"),
	ctx = example.getContext('2d');

window.addEventListener('load', ()=>{
	if(typeof ennageStart !== 'undefined'){
		controllerCanvasGrid.reloadExampleSize(ennageStart);
		window.addEventListener('resize', ()=>{
			ennageStart.duration = 100;
			controllerCanvasGrid.reloadExampleSize(ennageStart);
		}, false);
	}
});

var controllerCanvasGrid = {
	reloadExampleSize(ennageStart){
		modelCanvasGrid.reloadExampleSize(ennageStart);
	},
}

var modelCanvasGrid = {
	reloadExampleSize(ennageStart){
		let clWidth  = document.body.clientWidth,
			clHeight = document.body.clientHeight;
		viewCanvasGrid.exampleSize(clWidth, clHeight);
		viewCanvasGrid.buildGrid(ennageStart);
	},
	animate: function(options){
		var start = performance.now(),
	    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                              window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
		requestAnimationFrame(function animate(time){
			var timeFraction = (time - start) / options.duration;
			if (timeFraction > 1) timeFraction = 1;
			var progress = options.timings(timeFraction);
			options.draw(progress);
			if (timeFraction < 1){
				requestAnimationFrame(animate);
			}
		});
	}
}

var viewCanvasGrid = {
	exampleSize: (clWidth, clHeight)=>{
		example.width  = clWidth;
		example.height = clHeight;
	},
	buildGrid: function(ennageStart){
		this.animateGrid.call(ennageStart);
	},
	animateGrid: function(){
		var animateArgObj = {
			duration: this.duration || 2000,
			timing: this.timing || 'line',
			colRow: this.colRow || 3,
			color: this.color || 'black',
			width: this.width || '1',
			timings: function(timeFraction){
				var i;
				switch (this.timing) {
					case 'line':
						i = timeFraction;
						break;
					case 'quadratic':
						i = Math.pow(timeFraction, 2);
						break;
					case 'cubed':
						i = Math.pow(timeFraction, 3);
						break;
					case 'fivePow':
						i = Math.pow(timeFraction, 5);
						break;
					case 'arc':
						i = 1 - Math.sin(Math.acos(timeFraction));
						break;
					case 'archery':
						i = Math.pow(timeFraction, 2) * ((1.5 + 1) * timeFraction - 1.5);
						break;
					case 'elasticity':
						i = Math.pow(2, 10 * (timeFraction - 1)) * Math.cos(20 * Math.PI * 1.5 / 3 * timeFraction);
						break;
					default:
						i = 1 - Math.sin(Math.acos(timeFraction));
						break;
				}
				return i;
			},
			draw: function(progress){
				let col = example.width / this.colRow,
					row = example.height / this.colRow;
				for(let i = 1; i < this.colRow; i++){
					ctx.beginPath();
					ctx.moveTo(col * i, 0);
					ctx.lineTo(col * i, progress * example.height);
					ctx.moveTo(0, row * i);
					ctx.lineTo(progress * example.width, row * i);
					ctx.strokeStyle = this.color;
					ctx.lineWidth = this.width;
					ctx.stroke();
				}
			}
		}
		modelCanvasGrid.animate(animateArgObj);
	}
}